CREATE_PRIME_TABLE = '''
CREATE TABLE if not exists PRIME_TABLE
 (
 ID
    INTEGER
    PRIMARY KEY AUTOINCREMENT
    NOT NULL,
 PRIME
    INTEGER
    NOT NULL
    UNIQUE,
 COUNT
    INTEGER
    NOT NULL,
 TIME
    INTEGER
    NOT NULL
 );
'''
CREATE_PRIME_TABLE_INITIAL = '''
  INSERT INTO PRIME_TABLE
  (PRIME,COUNT,TIME)
  VALUES
  (2,1,0),
  (3,1,0);
 '''
OVERWRITE_PRIME_TABLE = '''
 DROP TABLE if exists PRIME_TABLE
 '''
INSERT_PRIME_TABLE = '''
INSERT INTO PRIME_TABLE
(PRIME,COUNT,TIME)
VALUES
({prime},{count},{time})
ON CONFLICT(PRIME) DO UPDATE SET
    TIME = (TIME + {time}),
    COUNT=COUNT+1;
'''
GET_MAX_PRIME = '''
SELECT max(PRIME) FROM PRIME_TABLE
;'''
GET_N_PRIME = '''
SELECT PRIME, COUNT, TIME, TIME / COUNT
FROM PRIME_TABLE
ORDER BY PRIME ASC
LIMIT {n}
'''
GET_N_SMALL_PRIME = '''
SELECT PRIME, COUNT, TIME
FROM PRIME_TABLE
order by PRIME ASC
LIMIT {n}
'''
GET_NUM_PRIME ='''
SELECT count(PRIME)
FROM PRIME_TABLE
WHERE PRIME <= {n}
order by PRIME ASC
'''
GET_SUM_PRIME ='''
SELECT sum(COUNT), sum(TIME)
FROM PRIME_TABLE
WHERE PRIME <= {n}
order by PRIME ASC
'''
GET_ALL_PRIME = '''
SELECT PRIME, COUNT, TIME, TIME / COUNT
FROM PRIME_TABLE
order by PRIME ASC
'''
GET_SUB_PRIME =  '''
SELECT PRIME, COUNT, TIME, TIME / COUNT
FROM PRIME_TABLE
WHERE PRIME <= {n}
order by PRIME ASC
'''
########################### Lucas table #####################################
OVERWRITE_PRIME_CALC_TABLE = '''
 DROP TABLE if exists PRIME_CALC_TABLE
 '''
CREATE_PRIME_CALC_TABLE = '''
CREATE TABLE if not exists PRIME_CALC_TABLE
 (
 ID
    INTEGER
    PRIMARY KEY AUTOINCREMENT
    NOT NULL,
 PRIME
    INTEGER
    NOT NULL
    UNIQUE,
 AKEY
    INTEGER
    NOT NULL,
 BKEY
    INTEGER
    NOT NULL
 );
'''

CREATE_PRIME_TERM_TABLE = '''
CREATE TABLE if not exists PRIME_TERM_TABLE
 (
 ID
    INTEGER
    PRIMARY KEY AUTOINCREMENT
    NOT NULL,
 KEY
    INTEGER
    NOT NULL,
PRIME
    INTEGER
    NOT NULL
    UNIQUE,
 EXPONENT
    INTEGER
    NOT NULL
 );
'''
